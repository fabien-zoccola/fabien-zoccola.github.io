import{W as t,t as s,w as e,H as r}from"./index-fe8be053.js";let i=0;export default class extends t{static get params(){return{primary:!0,linkValue:!1,linkHostValue:!1}}init(){const{host:t}=this;this.props.for=t=>{this.fieldId=t},this.props.assert=t=>{this.disconnectForm(this.currentForm,!0),t?[this.assert,this.assertValue]=t.split(":"):this.assert=null,this.connectForm()},t.nuSetAssert=t=>{this.disconnectForm(this.currentForm,!0),"function"==typeof t?(this.assert=t.name||"customValidator"+ ++i,this.assertValue=t):"string"==typeof t?[this.assert,this.assertValue]=t.split(":"):s&&(this.assert=null,this.assertValue=null,e("validator: wrong assert method",t)),this.connectForm()},t.nuGetAssert=()=>this.assert||this.assertValue,super.init()}get field(){return this.host.getAttribute("for").trim()}connected(){const{host:t}=this;null!=t._assert&&(t.nuSetAssert(t._assert),delete t._assert),this.linkContext("form",(t=>{this.currentForm&&t!==this.currentForm&&this.disconnectForm(this.currentForm,!!t),this.currentForm=t,t&&this.connectForm()}))}changed(t,s){super.changed(t,s),this.form&&this.connectForm()}connectForm(){let{fieldId:t,assert:s,form:e,assertValue:r}=this;t&&s&&e&&this.form.registerCheck(t,this,s,r)}disconnectForm(t=this.currentForm,s){const{fieldId:e,assert:r}=this;e&&r&&t&&(t.unregisterCheck(e,r),s||delete this.form)}setValidity(t){const{host:s}=this;this.validity!==t&&(super.setValidity(t),r(s,t,"collapse"))}}
